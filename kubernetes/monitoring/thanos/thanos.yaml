---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: thanos
  namespace: flux-system
spec:
  interval: 5m
  chart:
    spec:
      chart: thanos
      version: 0.3.29
      sourceRef:
        kind: HelmRepository
        name: banzaicloud-charts
      interval: 5m
  releaseName: thanos
  targetNamespace: monitoring
  test:
    enable: false # Enable helm test
  install:
    remediation: # perform remediation when helm install fails
      retries: 3
  upgrade:
    remediation: # perform remediation when helm upgrade fails
      retries: 3
      remediateLastFailure: true # remediate the last failure, when no retries remain
    cleanupOnFail: true
  rollback:
    timeout: 1m
    cleanupOnFail: true
  # Depends on having sealed-secret to un-encrypted required secrets: thanos-objstore-config.
  dependsOn:
    - name: sealed-secrets
      namespace: flux-system
  values:
    image:
      repository: quay.io/thanos/thanos
      tag: v0.16.0
    objstoreSecretOverride: thanos-objstore-config

    store:
      enabled: true
      dataVolume:
        backend:
          persistentVolumeClaim:
            claimName: thanos-store-data-volume
      persistentVolumeClaim:
        name: thanos-store-data-volume
        spec:
          #  storageClassName: ""
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
          selector: {}
            # volumeName: ""
            # volumeMode: ""
      metrics:
        serviceMonitor:
          enabled: true
      resources:
        limits:
          cpu: 100m
          memory: 100Mi
        requests:
          cpu: 30m
          memory: 400Mi
      serviceAccount: thanos-k8s
      livenessProbe:
        failureThreshold: 8
        httpGet:
          path: /-/healthy
          port: http
        periodSeconds: 30
      readinessProbe:
        failureThreshold: 20
        httpGet:
          path: /-/ready
          port: http
        periodSeconds: 5

    query:
      enabled: true
      # replicaCount: 1
      # replicaLabels:
      #   - replica
      stores:
      - "dnssrv+_grpc._tcp.prometheus-k8s-0.monitoring.svc.cluster.local"
      serviceAccount: thanos-k8s
      resources:
        limits:
          cpu: 1000m
          memory: 2Gi
        requests:
          cpu: 300m
          memory: 1Gi
      http:
        ingress:
          enabled: false
          # annotations:
          #   kubernetes.io/ingress.class: nginx
          #   cert-manager.io/cluster-issuer: 'letsencrypt-prod'
          #   nginx.ingress.kubernetes.io/auth-url: 'https://portefaix.xyz/oauth2/auth'
          #   nginx.ingress.kubernetes.io/auth-signin: 'https://portefaix.xyz/oauth2/start?rd=$escaped_request_uri'
          # hosts:
          #   - thanos.portefaix.xyz
          # tls:
          #   - secretName: thanos.portefaix.xyz-tls
          #     hosts:
          #       - thanos.portefaix.xyz
      metrics:
        serviceMonitor:
          enabled: true
      resources:
        limits:
          cpu: 400m
          memory: 1Gi
        requests:
          cpu: 100m
          memory: 400Mi
      livenessProbe:
        httpGet:
          path: /-/healthy
          port: http
      readinessProbe:
        httpGet:
          path: /-/ready
          port: http

    compact:
      enabled: true
      dataVolume:
        backend:
          persistentVolumeClaim:
            claimName: thanos-compact-data-volume
      persistentVolumeClaim:
        name: thanos-compact-data-volume
        spec:
          # storageClassName: ""
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
          selector: {}
            # volumeName: ""
            # volumeMode: ""
      resources:
        limits:
          cpu: 300m
          memory: 500Mi
        requests:
          cpu: 100m
          memory: 200Mi
      serviceAccount: thanos-k8s

    bucket:
      enabled: true
      http:
        ingress:
          enabled: false
          # annotations:
          #   kubernetes.io/ingress.class: nginx
          #   cert-manager.io/cluster-issuer: 'letsencrypt-prod'
          #   nginx.ingress.kubernetes.io/auth-url: 'https://portefaix.xyz/oauth2/auth'
          #   nginx.ingress.kubernetes.io/auth-signin: 'https://portefaix.xyz/oauth2/start?rd=$escaped_request_uri'
          # hosts:
          #   - bucket.portefaix.xyz
          # tls:
          #   - secretName: bucket.portefaix.xyz-tls
          #     hosts:
          #       - bucket.portefaix.xyz
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
        limits:
          cpu: 200m
          memory: 300Mi
      serviceAccount: thanos-k8s

    rule:
      enabled: false

    sidecar:
      enable: true
      serviceAccount: thanos-k8s
      metrics:
        serviceMonitor:
          enabled: true
  # valuesFrom:
  #   - kind: Secret
  #     name: thanos-objstore-config