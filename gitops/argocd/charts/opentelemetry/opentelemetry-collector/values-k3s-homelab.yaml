# Copyright (C) Nicolas Lamirault <nicolas.lamirault@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

---
ports:
- name: metrics
  port: 8888
  protocol: TCP
  targetPort: 8888

ingress:
  enabled: true
  name: homelab.portefaix.xyz
  className: nginx

envFrom:
- secretRef:
    name: opentelemetry-datadog-credentials
- secretRef:
    name: opentelemetry-lightstep-credentials
- secretRef:
    name: opentelemetry-grafanacloud-credentials

extraEnvs:
- name: "K8S_NODE_NAME"
  valueFrom:
    fieldRef:
      fieldPath: "spec.nodeName"
- name: "K8S_POD_NAME"
  valueFrom:
    fieldRef:
      fieldPath: "metadata.name"
- name: "K8S_NAMESPACE"
  valueFrom:
    fieldRef:
      fieldPath: "metadata.namespace"

serviceMonitor:
  enabled: true
  # extraLabels:
  #   monitoring: portefaix

# targetAllocator:
#   replicas: 1

collectors:

- name: metrics
  enabled: true
  mode: statefulset
  image:
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib
    tag: 0.78.0
  serviceMonitor:
    enabled: true
    additionalLabels:
    #   monitoring: portefaix
      observability: portefaix

  targetAllocator:
    enabled: true
    # serviceAccount: opentelemetry-targetallocator-sa
    allocationStrategy: consistent-hashing
    filterStrategy: relabel-config
    image:
      repository: ghcr.io/open-telemetry/opentelemetry-operator/target-allocator
      tag: 0.78.0
    replicas: 1
    prometheusCR:
      enabled: true
      serviceMonitorSelector:
        monitoring: portefaix
        # observability: portefaix
    serviceMonitor:
      enabled: true
      additionalLabels:
        # monitoring: portefaix
        observability: portefaix

  resources:
    limits:
      # cpu: 500m
      memory: 3Gi
    requests:
      cpu: "1"
      memory: 1Gi

  config:
    extensions:

      health_check:

      memory_ballast:
        size_in_percentage: 20

      # k8s_observer:
      #   auth_type: serviceAccount
      #   node: ${K8S_NODE_NAME}
      #   observe_pods: true
      #   observe_nodes: true

      pprof:
        endpoint: :1888

      zpages:
        endpoint: :55679

      basicauth/grafanacloud:
        client_auth:
          username: "${GRAFANA_CLOUD_METRICS_ID}"
          password: "${GRAFANA_CLOUD_METRICS_APIKEY}"

      # sigv4auth:
      #   region: eu-west-1
      #   service: aps

    receivers:

      # hostmetrics:
      #   collection_interval: 60s
      #   scrapers:
      #     cpu:
      #     load:
      #     memory:
      #     disk:
      #     filesystem:
      #     network:
      #     processes:

      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

      prometheus:
        config:
          global:
            scrape_interval: 60s
            scrape_timeout: 60s
            evaluation_interval: 60s
            # external_labels:
            #   project: portefaix-homelab
        # target_allocator:
        #   endpoint: http://metrics-targetallocator:80
        #   interval: 30s
        #   collector_id: ${POD_NAME}
        #   http_sd_config:
        #     refresh_interval: 60s
          scrape_configs:
          - job_name: 'kubernetes-kubelet'
            scrape_interval: 30s
            scrape_timeout: 20s
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            kubernetes_sd_configs:
            - role: node
            relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
            - target_label: __address__
              replacement: kubernetes.default.svc.cluster.local:443
            - source_labels: [__meta_kubernetes_node_name]
              regex: (.+)
              target_label: __metrics_path__
              replacement: /api/v1/nodes/$${1}/proxy/metrics
            - action: keep
              regex: $K8S_NODE_NAME
              source_labels: [__meta_kubernetes_node_name]
          - job_name: 'kubelet'
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            kubernetes_sd_configs:
            - role: node
            relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
            - target_label: __address__
              replacement: kubernetes.default.svc.cluster.local:443
            - source_labels: [__meta_kubernetes_node_name]
              regex: (.+)
              target_label: __metrics_path__
              replacement: /api/v1/nodes/$${1}/proxy/metrics/cadvisor
            - action: keep
              regex: $K8S_NODE_NAME
              source_labels: [__meta_kubernetes_node_name]
          - job_name: serviceMonitor/default/kube-prometheus-stack-prometheus-node-exporter/0
            honor_timestamps: true
            scrape_interval: 30s
            scrape_timeout: 30s
            scheme: http
            follow_redirects: true
            enable_http2: true
            relabel_configs:
            - source_labels: [job]
              separator: ;
              regex: (.*)
              target_label: __tmp_prometheus_job_name
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_app, __meta_kubernetes_service_labelpresent_app]
              separator: ;
              regex: (prometheus-node-exporter);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_service_label_release, __meta_kubernetes_service_labelpresent_release]
              separator: ;
              regex: (kube-prometheus-stack);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_port_name]
              separator: ;
              regex: http-metrics
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Node;(.*)
              target_label: node
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Pod;(.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_namespace]
              separator: ;
              regex: (.*)
              target_label: namespace
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: service
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_name]
              separator: ;
              regex: (.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_container_name]
              separator: ;
              regex: (.*)
              target_label: container
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: job
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_jobLabel]
              separator: ;
              regex: (.+)
              target_label: job
              replacement: $$1
              action: replace
            - separator: ;
              regex: (.*)
              target_label: endpoint
              replacement: http-metrics
              action: replace
            - source_labels: [__address__]
              separator: ;
              regex: (.*)
              modulus: 1
              target_label: __tmp_hash
              replacement: $$1
              action: hashmod
            - source_labels: [__tmp_hash]
              separator: ;
              regex: "0"
              replacement: $$1
              action: keep
            - action: keep
              regex: $K8S_NODE_NAME
              source_labels: [__meta_kubernetes_endpoint_node_name]
            kubernetes_sd_configs:
            - role: endpoints
              kubeconfig_file: ""
              follow_redirects: true
              enable_http2: true
              namespaces:
                own_namespace: false
                names:
                - default
          - job_name: serviceMonitor/default/kube-prometheus-stack-prometheus/0
            honor_timestamps: true
            scrape_interval: 30s
            scrape_timeout: 20s
            scheme: http
            follow_redirects: true
            enable_http2: true
            relabel_configs:
            - source_labels: [job]
              separator: ;
              regex: (.*)
              target_label: __tmp_prometheus_job_name
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_app, __meta_kubernetes_service_labelpresent_app]
              separator: ;
              regex: (kube-prometheus-stack-prometheus);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_service_label_release, __meta_kubernetes_service_labelpresent_release]
              separator: ;
              regex: (kube-prometheus-stack);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_service_label_self_monitor, __meta_kubernetes_service_labelpresent_self_monitor]
              separator: ;
              regex: (true);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_port_name]
              separator: ;
              regex: http-web
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Node;(.*)
              target_label: node
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Pod;(.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_namespace]
              separator: ;
              regex: (.*)
              target_label: namespace
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: service
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_name]
              separator: ;
              regex: (.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_container_name]
              separator: ;
              regex: (.*)
              target_label: container
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: job
              replacement: $$1
              action: replace
            - separator: ;
              regex: (.*)
              target_label: endpoint
              replacement: http-web
              action: replace
            - source_labels: [__address__]
              separator: ;
              regex: (.*)
              modulus: 1
              target_label: __tmp_hash
              replacement: $$1
              action: hashmod
            - source_labels: [__tmp_hash]
              separator: ;
              regex: "0"
              replacement: $$1
              action: keep
            - action: keep
              regex: $K8S_NODE_NAME
              source_labels: [__meta_kubernetes_endpoint_node_name]
            kubernetes_sd_configs:
            - role: endpoints
              kubeconfig_file: ""
              follow_redirects: true
              enable_http2: true
              namespaces:
                own_namespace: false
                names:
                - default
          - job_name: serviceMonitor/default/kube-prometheus-stack-operator/0
            honor_labels: true
            honor_timestamps: true
            scrape_interval: 30s
            scrape_timeout: 20s
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            follow_redirects: true
            enable_http2: true
            relabel_configs:
            - source_labels: [job]
              separator: ;
              regex: (.*)
              target_label: __tmp_prometheus_job_name
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_app, __meta_kubernetes_service_labelpresent_app]
              separator: ;
              regex: (kube-prometheus-stack-operator);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_service_label_release, __meta_kubernetes_service_labelpresent_release]
              separator: ;
              regex: (kube-prometheus-stack);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_port_name]
              separator: ;
              regex: https
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Node;(.*)
              target_label: node
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Pod;(.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_namespace]
              separator: ;
              regex: (.*)
              target_label: namespace
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: service
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_name]
              separator: ;
              regex: (.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_container_name]
              separator: ;
              regex: (.*)
              target_label: container
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: job
              replacement: $$1
              action: replace
            - separator: ;
              regex: (.*)
              target_label: endpoint
              replacement: https
              action: replace
            - source_labels: [__address__]
              separator: ;
              regex: (.*)
              modulus: 1
              target_label: __tmp_hash
              replacement: $$1
              action: hashmod
            - source_labels: [__tmp_hash]
              separator: ;
              regex: "0"
              replacement: $$1
              action: keep
            - action: keep
              regex: $K8S_NODE_NAME
              source_labels: [__meta_kubernetes_endpoint_node_name]
            kubernetes_sd_configs:
            - role: endpoints
              kubeconfig_file: ""
              follow_redirects: true
              enable_http2: true
              namespaces:
                own_namespace: false
                names:
                - default
          - job_name: serviceMonitor/default/kube-prometheus-stack-kubelet/2
            honor_labels: true
            honor_timestamps: true
            scrape_interval: 30s
            scrape_timeout: 20s
            metrics_path: /metrics/probes
            scheme: https
            authorization:
              type: Bearer
              credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            follow_redirects: true
            enable_http2: true
            relabel_configs:
            - source_labels: [job]
              separator: ;
              regex: (.*)
              target_label: __tmp_prometheus_job_name
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name, __meta_kubernetes_service_labelpresent_app_kubernetes_io_name]
              separator: ;
              regex: (kubelet);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_service_label_k8s_app, __meta_kubernetes_service_labelpresent_k8s_app]
              separator: ;
              regex: (kubelet);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_port_name]
              separator: ;
              regex: https-metrics
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Node;(.*)
              target_label: node
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Pod;(.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_namespace]
              separator: ;
              regex: (.*)
              target_label: namespace
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: service
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_name]
              separator: ;
              regex: (.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_container_name]
              separator: ;
              regex: (.*)
              target_label: container
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: job
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_k8s_app]
              separator: ;
              regex: (.+)
              target_label: job
              replacement: $$1
              action: replace
            - separator: ;
              regex: (.*)
              target_label: endpoint
              replacement: https-metrics
              action: replace
            - source_labels: [__metrics_path__]
              separator: ;
              regex: (.*)
              target_label: metrics_path
              replacement: $$1
              action: replace
            - source_labels: [__address__]
              separator: ;
              regex: (.*)
              modulus: 1
              target_label: __tmp_hash
              replacement: $$1
              action: hashmod
            - source_labels: [__tmp_hash]
              separator: ;
              regex: "0"
              replacement: $$1
              action: keep
            - action: keep
              regex: $K8S_NODE_NAME
              source_labels: [__meta_kubernetes_endpoint_node_name]
            kubernetes_sd_configs:
            - role: endpoints
              kubeconfig_file: ""
              follow_redirects: true
              enable_http2: true
              namespaces:
                own_namespace: false
                names:
                - kube-system
          - job_name: serviceMonitor/default/kube-prometheus-stack-kubelet/1
            honor_labels: true
            honor_timestamps: true
            scrape_interval: 30s
            scrape_timeout: 20s
            metrics_path: /metrics/cadvisor
            scheme: https
            authorization:
              type: Bearer
              credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            follow_redirects: true
            enable_http2: true
            relabel_configs:
            - source_labels: [job]
              separator: ;
              regex: (.*)
              target_label: __tmp_prometheus_job_name
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name, __meta_kubernetes_service_labelpresent_app_kubernetes_io_name]
              separator: ;
              regex: (kubelet);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_service_label_k8s_app, __meta_kubernetes_service_labelpresent_k8s_app]
              separator: ;
              regex: (kubelet);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_port_name]
              separator: ;
              regex: https-metrics
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Node;(.*)
              target_label: node
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Pod;(.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_namespace]
              separator: ;
              regex: (.*)
              target_label: namespace
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: service
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_name]
              separator: ;
              regex: (.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_container_name]
              separator: ;
              regex: (.*)
              target_label: container
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: job
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_k8s_app]
              separator: ;
              regex: (.+)
              target_label: job
              replacement: $$1
              action: replace
            - separator: ;
              regex: (.*)
              target_label: endpoint
              replacement: https-metrics
              action: replace
            - source_labels: [__metrics_path__]
              separator: ;
              regex: (.*)
              target_label: metrics_path
              replacement: $$1
              action: replace
            - source_labels: [__address__]
              separator: ;
              regex: (.*)
              modulus: 1
              target_label: __tmp_hash
              replacement: $$1
              action: hashmod
            - source_labels: [__tmp_hash]
              separator: ;
              regex: "0"
              replacement: $$1
              action: keep
            - action: keep
              regex: $K8S_NODE_NAME
              source_labels: [__meta_kubernetes_endpoint_node_name]
            kubernetes_sd_configs:
            - role: endpoints
              kubeconfig_file: ""
              follow_redirects: true
              enable_http2: true
              namespaces:
                own_namespace: false
                names:
                - kube-system
          - job_name: serviceMonitor/default/kube-prometheus-stack-kubelet/0
            honor_labels: true
            honor_timestamps: true
            scrape_interval: 30s
            scrape_timeout: 20s
            scheme: https
            authorization:
              type: Bearer
              credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            follow_redirects: true
            enable_http2: true
            relabel_configs:
            - source_labels: [job]
              separator: ;
              regex: (.*)
              target_label: __tmp_prometheus_job_name
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name, __meta_kubernetes_service_labelpresent_app_kubernetes_io_name]
              separator: ;
              regex: (kubelet);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_service_label_k8s_app, __meta_kubernetes_service_labelpresent_k8s_app]
              separator: ;
              regex: (kubelet);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_port_name]
              separator: ;
              regex: https-metrics
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Node;(.*)
              target_label: node
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Pod;(.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_namespace]
              separator: ;
              regex: (.*)
              target_label: namespace
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: service
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_name]
              separator: ;
              regex: (.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_container_name]
              separator: ;
              regex: (.*)
              target_label: container
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: job
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_k8s_app]
              separator: ;
              regex: (.+)
              target_label: job
              replacement: $$1
              action: replace
            - separator: ;
              regex: (.*)
              target_label: endpoint
              replacement: https-metrics
              action: replace
            - source_labels: [__metrics_path__]
              separator: ;
              regex: (.*)
              target_label: metrics_path
              replacement: $$1
              action: replace
            - source_labels: [__address__]
              separator: ;
              regex: (.*)
              modulus: 1
              target_label: __tmp_hash
              replacement: $$1
              action: hashmod
            - source_labels: [__tmp_hash]
              separator: ;
              regex: "0"
              replacement: $$1
              action: keep
            - action: keep
              regex: $K8S_NODE_NAME
              source_labels: [__meta_kubernetes_endpoint_node_name]
            kubernetes_sd_configs:
            - role: endpoints
              kubeconfig_file: ""
              follow_redirects: true
              enable_http2: true
              namespaces:
                own_namespace: false
                names:
                - kube-system
          - job_name: serviceMonitor/default/kube-prometheus-stack-kube-state-metrics/0
            honor_labels: true
            honor_timestamps: true
            scrape_interval: 30s
            scrape_timeout: 20s
            scheme: http
            follow_redirects: true
            enable_http2: true
            relabel_configs:
            - source_labels: [job]
              separator: ;
              regex: (.*)
              target_label: __tmp_prometheus_job_name
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_instance, __meta_kubernetes_service_labelpresent_app_kubernetes_io_instance]
              separator: ;
              regex: (kube-prometheus-stack);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name, __meta_kubernetes_service_labelpresent_app_kubernetes_io_name]
              separator: ;
              regex: (kube-state-metrics);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_port_name]
              separator: ;
              regex: http
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Node;(.*)
              target_label: node
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Pod;(.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_namespace]
              separator: ;
              regex: (.*)
              target_label: namespace
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: service
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_name]
              separator: ;
              regex: (.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_container_name]
              separator: ;
              regex: (.*)
              target_label: container
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: job
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name]
              separator: ;
              regex: (.+)
              target_label: job
              replacement: $$1
              action: replace
            - separator: ;
              regex: (.*)
              target_label: endpoint
              replacement: http
              action: replace
            - source_labels: [__address__]
              separator: ;
              regex: (.*)
              modulus: 1
              target_label: __tmp_hash
              replacement: $$1
              action: hashmod
            - source_labels: [__tmp_hash]
              separator: ;
              regex: "0"
              replacement: $$1
              action: keep
            - action: keep
              regex: $K8S_NODE_NAME
              source_labels: [__meta_kubernetes_endpoint_node_name]
            kubernetes_sd_configs:
            - role: endpoints
              kubeconfig_file: ""
              follow_redirects: true
              enable_http2: true
              namespaces:
                own_namespace: false
                names:
                - default
          - job_name: serviceMonitor/default/kube-prometheus-stack-kube-scheduler/0
            honor_timestamps: true
            scrape_interval: 30s
            scrape_timeout: 20s
            scheme: http
            authorization:
              type: Bearer
              credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            follow_redirects: true
            enable_http2: true
            relabel_configs:
            - source_labels: [job]
              separator: ;
              regex: (.*)
              target_label: __tmp_prometheus_job_name
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_app, __meta_kubernetes_service_labelpresent_app]
              separator: ;
              regex: (kube-prometheus-stack-kube-scheduler);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_service_label_release, __meta_kubernetes_service_labelpresent_release]
              separator: ;
              regex: (kube-prometheus-stack);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_port_name]
              separator: ;
              regex: http-metrics
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Node;(.*)
              target_label: node
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Pod;(.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_namespace]
              separator: ;
              regex: (.*)
              target_label: namespace
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: service
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_name]
              separator: ;
              regex: (.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_container_name]
              separator: ;
              regex: (.*)
              target_label: container
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: job
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_jobLabel]
              separator: ;
              regex: (.+)
              target_label: job
              replacement: $$1
              action: replace
            - separator: ;
              regex: (.*)
              target_label: endpoint
              replacement: http-metrics
              action: replace
            - source_labels: [__address__]
              separator: ;
              regex: (.*)
              modulus: 1
              target_label: __tmp_hash
              replacement: $$1
              action: hashmod
            - source_labels: [__tmp_hash]
              separator: ;
              regex: "0"
              replacement: $$1
              action: keep
            - action: keep
              regex: $K8S_NODE_NAME
              source_labels: [__meta_kubernetes_endpoint_node_name]
            kubernetes_sd_configs:
            - role: endpoints
              kubeconfig_file: ""
              follow_redirects: true
              enable_http2: true
              namespaces:
                own_namespace: false
                names:
                - kube-system
          - job_name: serviceMonitor/default/kube-prometheus-stack-kube-proxy/0
            honor_timestamps: true
            scrape_interval: 30s
            scrape_timeout: 20s
            scheme: http
            authorization:
              type: Bearer
              credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            follow_redirects: true
            enable_http2: true
            relabel_configs:
            - source_labels: [job]
              separator: ;
              regex: (.*)
              target_label: __tmp_prometheus_job_name
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_app, __meta_kubernetes_service_labelpresent_app]
              separator: ;
              regex: (kube-prometheus-stack-kube-proxy);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_service_label_release, __meta_kubernetes_service_labelpresent_release]
              separator: ;
              regex: (kube-prometheus-stack);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_port_name]
              separator: ;
              regex: http-metrics
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Node;(.*)
              target_label: node
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Pod;(.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_namespace]
              separator: ;
              regex: (.*)
              target_label: namespace
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: service
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_name]
              separator: ;
              regex: (.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_container_name]
              separator: ;
              regex: (.*)
              target_label: container
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: job
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_jobLabel]
              separator: ;
              regex: (.+)
              target_label: job
              replacement: $$1
              action: replace
            - separator: ;
              regex: (.*)
              target_label: endpoint
              replacement: http-metrics
              action: replace
            - source_labels: [__address__]
              separator: ;
              regex: (.*)
              modulus: 1
              target_label: __tmp_hash
              replacement: $$1
              action: hashmod
            - source_labels: [__tmp_hash]
              separator: ;
              regex: "0"
              replacement: $$1
              action: keep
            - action: keep
              regex: $K8S_NODE_NAME
              source_labels: [__meta_kubernetes_endpoint_node_name]
            kubernetes_sd_configs:
            - role: endpoints
              kubeconfig_file: ""
              follow_redirects: true
              enable_http2: true
              namespaces:
                own_namespace: false
                names:
                - kube-system
          - job_name: serviceMonitor/default/kube-prometheus-stack-kube-etcd/0
            honor_timestamps: true
            scrape_interval: 30s
            scrape_timeout: 20s
            scheme: http
            authorization:
              type: Bearer
              credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            follow_redirects: true
            enable_http2: true
            relabel_configs:
            - source_labels: [job]
              separator: ;
              regex: (.*)
              target_label: __tmp_prometheus_job_name
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_app, __meta_kubernetes_service_labelpresent_app]
              separator: ;
              regex: (kube-prometheus-stack-kube-etcd);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_service_label_release, __meta_kubernetes_service_labelpresent_release]
              separator: ;
              regex: (kube-prometheus-stack);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_port_name]
              separator: ;
              regex: http-metrics
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Node;(.*)
              target_label: node
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Pod;(.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_namespace]
              separator: ;
              regex: (.*)
              target_label: namespace
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: service
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_name]
              separator: ;
              regex: (.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_container_name]
              separator: ;
              regex: (.*)
              target_label: container
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: job
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_jobLabel]
              separator: ;
              regex: (.+)
              target_label: job
              replacement: $$1
              action: replace
            - separator: ;
              regex: (.*)
              target_label: endpoint
              replacement: http-metrics
              action: replace
            - source_labels: [__address__]
              separator: ;
              regex: (.*)
              modulus: 1
              target_label: __tmp_hash
              replacement: $$1
              action: hashmod
            - source_labels: [__tmp_hash]
              separator: ;
              regex: "0"
              replacement: $$1
              action: keep
            - action: keep
              regex: $K8S_NODE_NAME
              source_labels: [__meta_kubernetes_endpoint_node_name]
            kubernetes_sd_configs:
            - role: endpoints
              kubeconfig_file: ""
              follow_redirects: true
              enable_http2: true
              namespaces:
                own_namespace: false
                names:
                - kube-system
          - job_name: serviceMonitor/default/kube-prometheus-stack-kube-controller-manager/0
            honor_timestamps: true
            scrape_interval: 30s
            scrape_timeout: 20s
            scheme: http
            authorization:
              type: Bearer
              credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            follow_redirects: true
            enable_http2: true
            relabel_configs:
            - source_labels: [job]
              separator: ;
              regex: (.*)
              target_label: __tmp_prometheus_job_name
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_app, __meta_kubernetes_service_labelpresent_app]
              separator: ;
              regex: (kube-prometheus-stack-kube-controller-manager);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_service_label_release, __meta_kubernetes_service_labelpresent_release]
              separator: ;
              regex: (kube-prometheus-stack);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_port_name]
              separator: ;
              regex: http-metrics
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Node;(.*)
              target_label: node
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Pod;(.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_namespace]
              separator: ;
              regex: (.*)
              target_label: namespace
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: service
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_name]
              separator: ;
              regex: (.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_container_name]
              separator: ;
              regex: (.*)
              target_label: container
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: job
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_jobLabel]
              separator: ;
              regex: (.+)
              target_label: job
              replacement: $$1
              action: replace
            - separator: ;
              regex: (.*)
              target_label: endpoint
              replacement: http-metrics
              action: replace
            - source_labels: [__address__]
              separator: ;
              regex: (.*)
              modulus: 1
              target_label: __tmp_hash
              replacement: $$1
              action: hashmod
            - source_labels: [__tmp_hash]
              separator: ;
              regex: "0"
              replacement: $$1
              action: keep
            - action: keep
              regex: $K8S_NODE_NAME
              source_labels: [__meta_kubernetes_endpoint_node_name]
            kubernetes_sd_configs:
            - role: endpoints
              kubeconfig_file: ""
              follow_redirects: true
              enable_http2: true
              namespaces:
                own_namespace: false
                names:
                - kube-system
          - job_name: serviceMonitor/default/kube-prometheus-stack-coredns/0
            honor_timestamps: true
            scrape_interval: 30s
            scrape_timeout: 20s
            scheme: http
            authorization:
              type: Bearer
              credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            follow_redirects: true
            enable_http2: true
            relabel_configs:
            - source_labels: [job]
              separator: ;
              regex: (.*)
              target_label: __tmp_prometheus_job_name
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_app, __meta_kubernetes_service_labelpresent_app]
              separator: ;
              regex: (kube-prometheus-stack-coredns);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_service_label_release, __meta_kubernetes_service_labelpresent_release]
              separator: ;
              regex: (kube-prometheus-stack);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_port_name]
              separator: ;
              regex: http-metrics
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Node;(.*)
              target_label: node
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Pod;(.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_namespace]
              separator: ;
              regex: (.*)
              target_label: namespace
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: service
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_name]
              separator: ;
              regex: (.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_container_name]
              separator: ;
              regex: (.*)
              target_label: container
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: job
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_jobLabel]
              separator: ;
              regex: (.+)
              target_label: job
              replacement: $$1
              action: replace
            - separator: ;
              regex: (.*)
              target_label: endpoint
              replacement: http-metrics
              action: replace
            - source_labels: [__address__]
              separator: ;
              regex: (.*)
              modulus: 1
              target_label: __tmp_hash
              replacement: $$1
              action: hashmod
            - source_labels: [__tmp_hash]
              separator: ;
              regex: "0"
              replacement: $$1
              action: keep
            - action: keep
              regex: $K8S_NODE_NAME
              source_labels: [__meta_kubernetes_endpoint_node_name]
            kubernetes_sd_configs:
            - role: endpoints
              kubeconfig_file: ""
              namespaces:
                own_namespace: false
                names:
                - kube-system
          - job_name: serviceMonitor/default/kube-prometheus-stack-apiserver/0
            honor_timestamps: true
            scrape_interval: 30s
            scrape_timeout: 20s
            scheme: https
            authorization:
              type: Bearer
              credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              server_name: kubernetes
            follow_redirects: true
            enable_http2: true
            relabel_configs:
            - source_labels: [job]
              separator: ;
              regex: (.*)
              target_label: __tmp_prometheus_job_name
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_component, __meta_kubernetes_service_labelpresent_component]
              separator: ;
              regex: (kubernetes);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_port_name]
              separator: ;
              regex: https
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Node;(.*)
              target_label: node
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Pod;(.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_namespace]
              separator: ;
              regex: (.*)
              target_label: namespace
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: service
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_name]
              separator: ;
              regex: (.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_container_name]
              separator: ;
              regex: (.*)
              target_label: container
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: job
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_component]
              separator: ;
              regex: (.+)
              target_label: job
              replacement: $$1
              action: replace
            - separator: ;
              regex: (.*)
              target_label: endpoint
              replacement: https
              action: replace
            - source_labels: [__address__]
              separator: ;
              regex: (.*)
              modulus: 1
              target_label: __tmp_hash
              replacement: $$1
              action: hashmod
            - source_labels: [__tmp_hash]
              separator: ;
              regex: "0"
              replacement: $$1
              action: keep
            - action: keep
              regex: $K8S_NODE_NAME
              source_labels: [__meta_kubernetes_endpoint_node_name]
            kubernetes_sd_configs:
            - role: endpoints
              kubeconfig_file: ""
              follow_redirects: true
              enable_http2: true
              namespaces:
                own_namespace: false
                names:
                - default
          - job_name: serviceMonitor/default/kube-prometheus-stack-alertmanager/0
            honor_timestamps: true
            scrape_interval: 30s
            scrape_timeout: 20s
            scheme: http
            follow_redirects: true
            enable_http2: true
            relabel_configs:
            - source_labels: [job]
              separator: ;
              regex: (.*)
              target_label: __tmp_prometheus_job_name
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_app, __meta_kubernetes_service_labelpresent_app]
              separator: ;
              regex: (kube-prometheus-stack-alertmanager);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_service_label_release, __meta_kubernetes_service_labelpresent_release]
              separator: ;
              regex: (kube-prometheus-stack);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_service_label_self_monitor, __meta_kubernetes_service_labelpresent_self_monitor]
              separator: ;
              regex: (true);true
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_port_name]
              separator: ;
              regex: http-web
              replacement: $$1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Node;(.*)
              target_label: node
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Pod;(.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_namespace]
              separator: ;
              regex: (.*)
              target_label: namespace
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: service
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_name]
              separator: ;
              regex: (.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_pod_container_name]
              separator: ;
              regex: (.*)
              target_label: container
              replacement: $$1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: job
              replacement: $$1
              action: replace
            - separator: ;
              regex: (.*)
              target_label: endpoint
              replacement: http-web
              action: replace
            - source_labels: [__address__]
              separator: ;
              regex: (.*)
              modulus: 1
              target_label: __tmp_hash
              replacement: $$1
              action: hashmod
            - source_labels: [__tmp_hash]
              separator: ;
              regex: "0"
              replacement: $$1
              action: keep
            - action: keep
              regex: $K8S_NODE_NAME
              source_labels: [__meta_kubernetes_endpoint_node_name]
            kubernetes_sd_configs:
            - role: endpoints
              kubeconfig_file: ""
              follow_redirects: true
              enable_http2: true
              namespaces:
                own_namespace: false
                names:
                - default
          - job_name: 'kube-state-metrics'
            static_configs:
            - targets: ['kube-state-metrics.kube-system.svc.cluster.local:8080']
          - job_name: 'node-exporter'
            kubernetes_sd_configs:
            - role: endpoints
            ec2_sd_configs:
            relabel_configs:
            - source_labels: [__address__]
              action: keep
              regex: '.*:9100$'
            - action: replace
              source_labels: [__meta_kubernetes_endpoint_node_name]
              target_label: nodename
            - action: keep
              regex: $K8S_NODE_NAME
              source_labels: [__meta_kubernetes_endpoint_node_name]
          # - job_name: 'custom-metrics'
          #   kubernetes_sd_configs:
          #   - role: pod
          #   relabel_configs:
          #   - source_labels: [ __address__ ]
          #     action: keep
          #     regex: '9090'
          #   - action: replace
          #     source_labels: [__meta_kubernetes_pod_node_name]
          #     target_label: nodename
          #   - action: replace
          #     source_labels: [__meta_kubernetes_namespace]
          #     target_label: namespace
          #   - action: replace
          #     source_labels: [__meta_kubernetes_pod_name]
          #     target_label: pod_name
          #   - action: replace
          #     source_labels: [__meta_kubernetes_pod_container_name]
          #     target_label: container_name
          #   - action: replace
          #     source_labels: [__meta_kubernetes_pod_controller_kind]
          #     target_label: pod_controller_kind
          #   - action: keep
          #     regex: $K8S_NODE_NAME
          #     source_labels: [__meta_kubernetes_pod_node_name]
          #   metric_relabel_configs:
          #   - source_labels: [ __name__ ]
          #     regex: '{{ .Values.customMetricsDroppedSeriesPrefixes }}'
          #     action: drop

      # k8s_cluster:
      #   collection_interval: 60s
      #   distribution: kubernetes
      #   node_conditions_to_report: [Ready, DiskPressure, MemoryPressure, PIDPressure, NetworkUnavailable]
      #   allocatable_types_to_report: [cpu, memory, ephemeral-storage, storage]

      # k8s_events:
      #   auth_type: "serviceAccount"

      # kubeletstats:
      #   collection_interval: 60s
      #   auth_type: "serviceAccount"
      #   endpoint: "${K8S_NODE_NAME}:10250"
      #   insecure_skip_verify: true

    processors:

      batch:
        send_batch_size: 1500
        send_batch_max_size: 1500
        timeout: 30s

      # Data sources: traces, metrics, logs
      memory_limiter:
        limit_percentage: 90
        spike_limit_percentage: 30
        check_interval: 5s

      # AWS
      # attributes/metrics:
      #   actions:
      #   - key: cluster
      #     action: upsert
      #     value: {{ .Values.ekscluster }}
      #   - key: region
      #     action: upsert
      #     value: {{ .Values.region }}
      #   - key: account_id
      #     action: upsert
      #     value: {{ .Values.accountId }}

      # metricstransform:
      #   transforms:
      #      include: .+
      #      match_type: regexp
      #      action: update
      #      operations:
      #        - action: add_label
      #          new_label: kubernetes.cluster.id
      #          new_value: kind-local
      #        - action: add_label
      #          new_label: kubernetes.name
      #          new_value: local

      # k8sattributes:
      #   passthrough: false
      #   pod_association:
      #   - sources:
      #     - from: resource_attribute
      #       name: k8s.pod.name
      #   extract:
      #     metadata:
      #     - k8s.namespace.name
      #     - k8s.pod.name
      #     - k8s.pod.uid
      #     - k8s.node.name
      #     - k8s.pod.start_time
      #     # FIXME: https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/23067
      #     # - k8s.deployment.name
      #     # - k8s.replicaset.name
      #     # - k8s.replicaset.uid
      #     # - k8s.daemonset.name
      #     # - k8s.daemonset.uid
      #     # - k8s.statefulset.name
      #     # - k8s.statefulset.uid
      #     - k8s.job.name
      #     - k8s.job.uid
      #     - k8s.cronjob.name
      #     - container.image.tag
      #     - container.image.name

      # resource:
      #   attributes:
      #   - key: collector.name
      #     value: "${KUBE_POD_NAME}"
      #     action: insert

      # The resource detection processor adds context related to the cloud provider the Collector is running on.
      # It is necessary **only** on gateway deployment mode, to correctly identify the host that telemetry data comes from.
      # resourcedetection:
      #   detectors: [gcp, ecs, ec2, azure, system]

    exporters:

      logging:
        # verbosity: detailed
        verbosity: normal

      prometheus:
        endpoint: "0.0.0.0:9090"
        metric_expiration: 180m
        # enable_open_metrics: true
        resource_to_telemetry_conversion:
          enabled: true

      prometheusremotewrite/mimir:
        endpoint: http://mimir-nginx.monitoring.svc.cluster.local:80/api/v1/push

      # prometheusremotewrite/grafanacloud:
      #   endpoint: https://prometheus-us-central1.grafana.net/api/prom/push
      #   auth:
      #     authenticator: basicauth/grafanacloud

      # prometheusremotewrite/amp:
      #   endpoint: https://
      #   auth:
      #     authenticator: sigv4auth
      #   resource_to_telemetry_conversion:
      #     enabled: true

      # otlp/honeycomb_metrics:
      #   endpoint: "api.honeycomb.io:443"
      #   headers:
      #     "x-honeycomb-team": "${HONEYCOMB_API_KEY}"
      #     "x-honeycomb-dataset": "portefaix-homelab-metrics"

      # otlp/lightstep:
      #   endpoint: ingest.lightstep.com:443
      #   headers:
      #     "lightstep-access-token": "${LIGHTSTEP_TOKEN}"

      # datadog:
      #   # env: prod
      #   # service: opentelemetry
      #   # tags:
      #   #   - cloud:homelab
      #   api:
      #     key: ${DATADOG_API_KEY}
      #     site: datadoghq.com

      # awsxray:
      #   region: eu-west-1

    service:

      telemetry:
        logs:
          level: info
          encoding: json
        metrics:
          level: detailed
          address: 0.0.0.0:8888

      extensions:
      - health_check
      - memory_ballast
      # - k8s_observer
      - pprof
      - zpages
      # - basicauth/grafanacloud

      pipelines:
        metrics:
          receivers:
          # - hostmetrics
          - otlp
          - prometheus
          # - k8s_cluster
          # - kubeletstats
          # - receiver_creator
          processors:
          - batch
          - memory_limiter
          # - metricstransform
          - k8sattributes
          # - resourcedetection/gce
          exporters:
          - logging
          - prometheus
          # - prometheusremotewrite/mimir
          # - prometheusremotewrite/grafanacloud
          # - otlp/honeycomb_metrics
          # - otlp/lightstep
          # - datadog

- name: traces
  enabled: true
  mode: statefulset
  image:
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib
    tag: 0.78.0
  serviceMonitor:
    enabled: true
    additionalLabels:
      # monitoring: portefaix
      observability: portefaix

  targetAllocator:
    enabled: false

  resources:
    limits:
      # cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 500Mi

  config:
    extensions:

      health_check:

      memory_ballast:
        size_in_percentage: 20

      # k8s_observer:
      #   auth_type: serviceAccount
      #   node: ${K8S_NODE_NAME}
      #   observe_pods: true
      #   observe_nodes: true

      pprof:
        endpoint: :1888

      zpages:
        endpoint: :55679

      basicauth/grafanacloud:
        client_auth:
          username: "${GRAFANA_CLOUD_TRACES_ID}"
          password: "${GRAFANA_CLOUD_TRACES_APIKEY}"

    receivers:

      jaeger:
        protocols:
          grpc:
            endpoint: 0.0.0.0:14250
          thrift_http:
            endpoint: 0.0.0.0:14268
          thrift_compact:
            endpoint: 0.0.0.0:6831

      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

      # zipkin:
      #   endpoint: 0.0.0.0:9411

    processors:

      batch:
        send_batch_max_size: 1000
        timeout: 15s
        send_batch_size: 800

      # Data sources: traces, metrics, logs
      memory_limiter:
        limit_percentage: 90
        spike_limit_percentage: 30
        check_interval: 5s

      resource:
        attributes:
        - key: collector.name
          value: "${KUBE_POD_NAME}"
          action: insert

      # The resource detection processor adds context related to the cloud provider the Collector is running on.
      # It is necessary **only** on gateway deployment mode, to correctly identify the host that telemetry data comes from.
      # resourcedetection:
      #   detectors: [gcp, ecs, ec2, azure, system]

    exporters:

      logging:
        # verbosity: detailed
        verbosity: normal

      # Data sources: traces, metrics, logs
      otlp/tempo:
        endpoint: tempo-gateway.tracing.svc.cluster.local:4317
        tls:
          insecure_skip_verify: true
          insecure: true

      # otlp/honeycomb_metrics:
      #   endpoint: "api.honeycomb.io:443"
      #   headers:
      #     "x-honeycomb-team": "${HONEYCOMB_API_KEY}"
      #     "x-honeycomb-dataset": "portefaix-homelab-metrics"

      # otlp/lightstep:
      #   endpoint: ingest.lightstep.com:443
      #   headers:
      #     "lightstep-access-token": "${LIGHTSTEP_TOKEN}"

      # otlp/grafanacloud:
      #   endpoint: tempo-us-central1.grafana.net:443
      #   auth:
      #     authenticator: basicauth/grafanacloud

      # datadog:
      #   # env: prod
      #   # service: opentelemetry
      #   # tags:
      #   #   - cloud:homelab
      #   api:
      #     key: ${DATADOG_API_KEY}
      #     site: datadoghq.com

    service:

      telemetry:
        logs:
          level: info
          encoding: json
        metrics:
          level: detailed
          address: 0.0.0.0:8888

      extensions:
      - health_check
      - memory_ballast
      # - k8s_observer
      - pprof
      - zpages
      - basicauth/grafanacloud

      pipelines:

        traces:
          receivers:
          - otlp
          processors:
          - batch
          # - k8sattributes
          - memory_limiter
          - resource
          exporters:
          - logging
          - otlp/tempo
          # - otlp/grafanacloud
          # - otlp/honeycomb_traces
          # - otlp/lightstep
          # - datadog

- name: logs
  enabled: true
  mode: statefulset
  image:
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib
    tag: 0.78.0
  serviceMonitor:
    enabled: true
    additionalLabels:
      # monitoring: portefaix
      observability: portefaix

  targetAllocator:
    enabled: false

  resources:
    limits:
      # cpu: 500m
      memory: 1Gi
    requests:
      cpu: 400m
      memory: 500Mi

  config:

    extensions:

      health_check:

      memory_ballast:
        size_in_percentage: 20

      # k8s_observer:
      #   auth_type: serviceAccount
      #   node: ${K8S_NODE_NAME}
      #   observe_pods: true
      #   observe_nodes: true

      pprof:
        endpoint: :1888

      zpages:
        endpoint: :55679

      basicauth/grafanacloud:
        client_auth:
          username: "${GRAFANA_CLOUD_LOGS_ID}"
          password: "${GRAFANA_CLOUD_LOGS_APIKEY}"

    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

      fluentforward:
        endpoint: 0.0.0.0:24224

      k8s_events:

    processors:
      transform:
        log_statements:
        - context: log
          statements:
          - merge_maps(attributes, attributes["kubernetes"], "upsert")
          - delete_key(attributes, "kubernetes")
      attributes:
        actions:
        - action: insert
          key: namespace
          from_attribute: namespace_name
        - action: insert
          key: pod
          from_attribute: pod_name
        - action: insert
          key: container
          from_attribute: container_name
        - action: insert
          key: host
          from_attribute: host
        - action: insert
          key: loki.attribute.labels
          value: [namespace, pod, host, container]

      batch:
        send_batch_max_size: 1000
        timeout: 15s
        send_batch_size: 800

      # Data sources: traces, metrics, logs
      memory_limiter:
        limit_percentage: 90
        spike_limit_percentage: 30
        check_interval: 5s

      # The resource detection processor adds context related to the cloud provider the Collector is running on.
      # It is necessary **only** on gateway deployment mode, to correctly identify the host that telemetry data comes from.
      # resourcedetection:
      #   detectors: [gcp, ecs, ec2, azure, system]

    exporters:

      logging:
        # verbosity: detailed
        verbosity: normal

      # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/lokiexporter/README.md
      loki:
        endpoint: http://loki-loki-distributed-gateway.logging.svc.cluster.local:80/loki/api/v1/push
        headers:
          X-Scope-OrgID: homelab
        tls:
          insecure: true

      # loki/grafanacloud:
      #   endpoint: https://logs-prod-us-central1.grafana.net/loki/api/v1/push
      #   headers:
      #     X-Scope-OrgID: homelab
      #   auth:
      #     authenticator: basicauth/grafanacloud

      # otlp/lightstep:
      #   endpoint: ingest.lightstep.com:443
      #   headers:
      #     "lightstep-access-token": "${LIGHTSTEP_TOKEN}"

      # datadog:
      #   # env: prod
      #   # service: opentelemetry
      #   # tags:
      #   #   - cloud:homelab
      #   api:
      #     key: ${DATADOG_API_KEY}
      #     site: datadoghq.com

    service:

      telemetry:
        logs:
          level: info
          encoding: json
        metrics:
          level: detailed
          address: 0.0.0.0:8888

      extensions:
      - health_check
      - memory_ballast
      - pprof
      - zpages
      - basicauth/grafanacloud

      pipelines:

        logs:
          receivers:
          - fluentforward
          - otlp
          - k8s_events
          processors:
          - batch
          - memory_limiter
          - transform
          - attributes
          exporters:
          - logging
          - loki
          # - loki/grafanacloud
