{{ define "agent.config.logs" }}

// /////////////////////////////////////////
// Modules

module.git "log_targets" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "main"
  path = "modules/kubernetes/logs/targets/logs-from-worker.river"

  arguments {
    forward_to = [
      module.git.log_format_json.exports.process.receiver,
    ]
  }
}

module.git "log_format_json" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "main"
  path = "modules/kubernetes/logs/log-formats/json.river"

  arguments {
    forward_to = [
      module.git.log_format_klog.exports.process.receiver,
    ]
  }
}

module.git "log_format_klog" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "main"
  path = "modules/kubernetes/logs/log-formats/klog.river"

  arguments {
    forward_to = [
      module.git.log_format_logfmt.exports.process.receiver,
    ]
  }
}

module.git "log_format_logfmt" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "main"
  path = "modules/kubernetes/logs/log-formats/logfmt.river"

  arguments {
    forward_to = [
      module.git.log_format_logjson.exports.process.receiver,
    ]
  }
}

module.git "log_format_logjson" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "main"
  path = "modules/kubernetes/logs/log-formats/json.river"

  arguments {
    forward_to = [
      module.git.log_format_otel.exports.process.receiver,
    ]
  }
}

module.git "log_format_otel" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "main"
  path = "modules/kubernetes/logs/log-formats/otel.river"

  arguments {
    forward_to = [
      module.git.log_level_default.exports.process.receiver,
    ]
  }
}

module.git "log_level_default" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "main"
  path = "modules/kubernetes/logs/labels/log-level.river"

  arguments {
    forward_to = [
      module.git.scrub_all.exports.process.receiver,
    ]
  }
}

module.git "drop_levels" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "main"
  path = "modules/kubernetes/logs/drops/levels.river"

  arguments {
    forward_to = [
      module.git.scrub_all.exports.process.receiver,
    ]
  }
}

module.git "scrub_all" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "main"
  path = "modules/kubernetes/logs/scrubs/all.river"

  arguments {
    forward_to = [
      module.git.embed_pod.exports.process.receiver,
    ]
  }
}

module.git "embed_pod" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "main"
  path = "modules/kubernetes/logs/embed/pod.river"

  arguments {
    forward_to = [
      module.git.label_keep.exports.process.receiver,
    ]
  }
}

module.git "label_keep" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "main"
  path = "modules/kubernetes/logs/labels/keep-labels.river"

  arguments {
    forward_to = [
      loki.write.local.receiver,
      // loki.write.grafana_cloud.receiver,
    ]
    keep_labels = [
      "app",
      "cluster",
      "component",
      "container",
      "deployment",
      "env",
      "filename",
      "instance",
      "job",
      "level",
      "log_type",
      "namespace",
      "region",
      "service",
    ]
  }
}

// Cluster Events

loki.source.kubernetes_events "cluster_events" {
  job_name   = "integrations/kubernetes/eventhandler"
  forward_to = [
    loki.process.cluster_events.receiver,
  ]
}

loki.process "cluster_events" {
  stage.static_labels {
    values = {
      cluster = local.file.cluster_name.content,
    }
  }

  stage.logfmt {
    mapping = {
      "component" = "sourcecomponent",
      "instance" = "sourcehost",
      // most events don't have a level but they do have a "type" i.e. Normal, Warning, Error, etc.
      "level" = "type",
    }
  }

  // set the instance extracted value as a label
  stage.labels {
    values = {
      component = "",
      instance = "",
      level = "",
    }
  }

  // since we're using the level label derived from the "type" property, one type is "Normal" which is not a log level
  // and will not properly color to an info level message, set the level to info.  This is also relavent for if dropping
  // info level messages is desired. As Normal will contain messages about pods starting, stopping, etc. which may be
  // something undesirable to keep.
  stage.match {
    selector = "{level=\"Normal\"}"

    stage.static_labels {
      values = {
        level = "Info",
      }
    }
  }

  stage.label_keep {
    values = [
      "app",
      "cluster",
      "component",
      "container",
      "deployment",
      "env",
      "filename",
      "instance",
      "job",
      "level",
      "log_type",
      "namespace",
      "region",
      "service",
    ]
  }

  forward_to = [
    loki.write.local.receiver,
    // loki.write.grafana_cloud.receiver,
  ]
}

// ********************************************
// * O P E N T E L E M E T R Y / L O G S
// ********************************************

otelcol.receiver.otlp "core" {
  grpc {
    endpoint = "0.0.0.0:4317"
  }
  http {
    endpoint = "0.0.0.0:4318"
  }

  output {
    logs = [otelcol.processor.batch.core.input]
  }
}

otelcol.processor.batch "core" {
  send_batch_max_size = 1000
  timeout = "15s"
  send_batch_size = 800

  output {
    logs = [otelcol.processor.memory_limiter.core.input]
  }
}

otelcol.processor.memory_limiter "core" {
  limit_percentage = 90
  spike_limit_percentage = 30
  check_interval = "5s"

  output {
    logs = [
      otelcol.exporter.loki.core.input,
    ]
  }
}

otelcol.exporter.loki "core" {
  forward_to = [
    loki.write.local.receiver,
    // loki.write.grafana_cloud.receiver,
  ]
}

{{ end }}
