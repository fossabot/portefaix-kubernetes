{{ define "agent.config.discovery_pods" }}

// ********************************************
// * D I S C O V E R Y
// ********************************************

discovery.kubernetes "pods" {
  role = "pod"
}

discovery.relabel "pod_logs" {
  targets = discovery.kubernetes.pods.targets
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action = "replace"
    target_label = "namespace"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action = "replace"
    target_label = "pod"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "container"
  }
  rule {
    source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_name"]
    separator = "/"
    action = "replace"
    replacement = "$1"
    target_label = "job"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_node_name"]
    // action = "keep"
    // regex = env("HOSTNAME")
    target_label  = "__host__"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
    separator = "/"
    action = "replace"
    replacement = "/var/log/pods/*$1/*.log"
    target_label = "__path__"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_label_app"]
    action = "replace"
    target_label = "app"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
    target_label  = "name"
  }

  rule {
    source_labels = [
      "__meta_kubernetes_pod_label_app_kubernetes_io_instance",
      "__meta_kubernetes_pod_label_app_kubernetes_io_name",
    ]
    target_label = "__helm_name__"
    separator    = "-"
    regex        = "(.+-.+)"
  }

  rule {
    // Try to identify a service name to eventually form the job label. We'll
    // prefer the first of the below labels, in descending order.
    source_labels = [
      "__meta_kubernetes_pod_label_k8s_app",
      "__meta_kubernetes_pod_label_app",
      "__meta_kubernetes_pod_label_name",
      "__helm_name__",
      "__meta_kubernetes_pod_controller_name",
      "__meta_kubernetes_pod_name",
    ]
    target_label = "__service__"

    // Our in-memory string will be something like A;B;C;D;E;F, where any of the
    // letters could be replaced with a label value or be empty if the label
    // value did not exist.
    //
    // We want to match for the very first sequence of non-semicolon characters
    // which is either prefaced by zero or more semicolons, and is followed by
    // zero or more semicolons before the rest of the string.
    //
    // This is a very annoying way of being able to do conditionals, and
    // ideally we can use River expressions in the future to make this much
    // less bizarre.
    regex = ";*([^;]+);*.*"
  }


}

local.file_match "pods" {
  path_targets = discovery.relabel.pod_logs.output
}

{{ end }}
